{"ast":null,"code":"/**\n * Discord activity image URLs\n * @param appId Application ID for the activity\n * @param key Image key from Discord\n * @returns Full image URL or null if not available\n */\nexport function resolveActivityImage(appId, key) {\n  if (!key) return null;\n  if (key.startsWith(\"http\")) return key;\n  if (key.startsWith(\"mp:\")) return \"https://media.discordapp.net/\" + key.slice(3);\n  return `https://cdn.discordapp.com/app-assets/${appId}/${key}.png`;\n}\n\n/**\n *  Discord emoji URL\n * @param emoji Emoji object from Discord\n * @returns Full emoji URL or null if not available\n */\nexport function resolveEmojiUrl(emoji) {\n  if (!(emoji !== null && emoji !== void 0 && emoji.id)) return null; // For Unicode emojis (no ID)\n  const ext = emoji.animated ? \"gif\" : \"png\";\n  return `https://cdn.discordapp.com/emojis/${emoji.id}.${ext}?v=1`;\n}\n\n/**\n * Formats time display from timestamps\n * @param start Start timestamp in ms\n * @param end End timestamp in ms (optional)\n * @returns Formatted time string (e.g. \"5:23\" or \"1:05:23\")\n */\nexport function formatTimeDisplay(start, end) {\n  if (!start) return \"\";\n  const now = Date.now();\n  const endTime = end || now;\n  const durationMs = endTime - start;\n  const seconds = Math.floor(durationMs / 1000 % 60);\n  const minutes = Math.floor(durationMs / (1000 * 60) % 60);\n  const hours = Math.floor(durationMs / (1000 * 60 * 60));\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n  } else {\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  }\n}\n\n/**\n * Formats music player time display with progress calculation\n * @param start Start timestamp in ms\n * @param end End timestamp in ms\n * @returns Object with current time, total time, and progress percentage\n */\nexport function formatMusicTime(start, end) {\n  if (!start || !end) return {\n    current: \"0:00\",\n    total: \"0:00\",\n    progress: 0\n  };\n  const now = Date.now();\n  const totalDuration = end - start;\n  const currentPosition = now - start;\n  const progress = Math.min(Math.max(currentPosition / totalDuration * 100, 0), 100);\n  return {\n    current: formatTimeDisplay(start, now),\n    total: formatTimeDisplay(start, end),\n    progress\n  };\n}","map":{"version":3,"names":["resolveActivityImage","appId","key","startsWith","slice","resolveEmojiUrl","emoji","id","ext","animated","formatTimeDisplay","start","end","now","Date","endTime","durationMs","seconds","Math","floor","minutes","hours","toString","padStart","formatMusicTime","current","total","progress","totalDuration","currentPosition","min","max"],"sources":["/home/aike/Development/aboutMe/src/utils/discordUtils.ts"],"sourcesContent":["/**\n * Discord activity image URLs\n * @param appId Application ID for the activity\n * @param key Image key from Discord\n * @returns Full image URL or null if not available\n */\nexport function resolveActivityImage(appId: string, key?: string | null) {\n  if (!key) return null;\n  if (key.startsWith(\"http\")) return key;\n  if (key.startsWith(\"mp:\"))\n    return \"https://media.discordapp.net/\" + key.slice(3);\n  return `https://cdn.discordapp.com/app-assets/${appId}/${key}.png`;\n}\n\n/**\n *  Discord emoji URL\n * @param emoji Emoji object from Discord\n * @returns Full emoji URL or null if not available\n */\nexport function resolveEmojiUrl(emoji: { id?: string; animated?: boolean }) {\n  if (!emoji?.id) return null; // For Unicode emojis (no ID)\n  const ext = emoji.animated ? \"gif\" : \"png\";\n  return `https://cdn.discordapp.com/emojis/${emoji.id}.${ext}?v=1`;\n}\n\n/**\n * Formats time display from timestamps\n * @param start Start timestamp in ms\n * @param end End timestamp in ms (optional)\n * @returns Formatted time string (e.g. \"5:23\" or \"1:05:23\")\n */\nexport function formatTimeDisplay(start?: number, end?: number): string {\n  if (!start) return \"\";\n\n  const now = Date.now();\n  const endTime = end || now;\n  const durationMs = endTime - start;\n  const seconds = Math.floor((durationMs / 1000) % 60);\n  const minutes = Math.floor((durationMs / (1000 * 60)) % 60);\n  const hours = Math.floor(durationMs / (1000 * 60 * 60));\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}`;\n  } else {\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  }\n}\n\n/**\n * Formats music player time display with progress calculation\n * @param start Start timestamp in ms\n * @param end End timestamp in ms\n * @returns Object with current time, total time, and progress percentage\n */\nexport function formatMusicTime(\n  start?: number,\n  end?: number\n): { current: string; total: string; progress: number } {\n  if (!start || !end) return { current: \"0:00\", total: \"0:00\", progress: 0 };\n\n  const now = Date.now();\n  const totalDuration = end - start;\n  const currentPosition = now - start;\n\n  const progress = Math.min(\n    Math.max((currentPosition / totalDuration) * 100, 0),\n    100\n  );\n\n  return {\n    current: formatTimeDisplay(start, now),\n    total: formatTimeDisplay(start, end),\n    progress,\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAoBA,CAACC,KAAa,EAAEC,GAAmB,EAAE;EACvE,IAAI,CAACA,GAAG,EAAE,OAAO,IAAI;EACrB,IAAIA,GAAG,CAACC,UAAU,CAAC,MAAM,CAAC,EAAE,OAAOD,GAAG;EACtC,IAAIA,GAAG,CAACC,UAAU,CAAC,KAAK,CAAC,EACvB,OAAO,+BAA+B,GAAGD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;EACvD,OAAO,yCAAyCH,KAAK,IAAIC,GAAG,MAAM;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAeA,CAACC,KAA0C,EAAE;EAC1E,IAAI,EAACA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEC,EAAE,GAAE,OAAO,IAAI,CAAC,CAAC;EAC7B,MAAMC,GAAG,GAAGF,KAAK,CAACG,QAAQ,GAAG,KAAK,GAAG,KAAK;EAC1C,OAAO,qCAAqCH,KAAK,CAACC,EAAE,IAAIC,GAAG,MAAM;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiBA,CAACC,KAAc,EAAEC,GAAY,EAAU;EACtE,IAAI,CAACD,KAAK,EAAE,OAAO,EAAE;EAErB,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,OAAO,GAAGH,GAAG,IAAIC,GAAG;EAC1B,MAAMG,UAAU,GAAGD,OAAO,GAAGJ,KAAK;EAClC,MAAMM,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEH,UAAU,GAAG,IAAI,GAAI,EAAE,CAAC;EACpD,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,UAAU,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EAC3D,MAAMK,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACH,UAAU,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAEvD,IAAIK,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,GAAGA,KAAK,IAAID,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIN,OAAO,CAC9DK,QAAQ,CAAC,CAAC,CACVC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACvB,CAAC,MAAM;IACL,OAAO,GAAGH,OAAO,IAAIH,OAAO,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC5D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAC7Bb,KAAc,EACdC,GAAY,EAC0C;EACtD,IAAI,CAACD,KAAK,IAAI,CAACC,GAAG,EAAE,OAAO;IAAEa,OAAO,EAAE,MAAM;IAAEC,KAAK,EAAE,MAAM;IAAEC,QAAQ,EAAE;EAAE,CAAC;EAE1E,MAAMd,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAMe,aAAa,GAAGhB,GAAG,GAAGD,KAAK;EACjC,MAAMkB,eAAe,GAAGhB,GAAG,GAAGF,KAAK;EAEnC,MAAMgB,QAAQ,GAAGT,IAAI,CAACY,GAAG,CACvBZ,IAAI,CAACa,GAAG,CAAEF,eAAe,GAAGD,aAAa,GAAI,GAAG,EAAE,CAAC,CAAC,EACpD,GACF,CAAC;EAED,OAAO;IACLH,OAAO,EAAEf,iBAAiB,CAACC,KAAK,EAAEE,GAAG,CAAC;IACtCa,KAAK,EAAEhB,iBAAiB,CAACC,KAAK,EAAEC,GAAG,CAAC;IACpCe;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}