{"ast":null,"code":"/**\n * Discord activity image URLs\n * @param appId Application ID for the activity\n * @param key Image key from Discord\n * @returns Full image URL or null if not available\n */export function resolveActivityImage(appId,key){if(!key)return null;if(key.startsWith(\"http\"))return key;if(key.startsWith(\"mp:\"))return\"https://media.discordapp.net/\"+key.slice(3);return\"https://cdn.discordapp.com/app-assets/\".concat(appId,\"/\").concat(key,\".png\");}/**\n *  Discord emoji URL\n * @param emoji Emoji object from Discord\n * @returns Full emoji URL or null if not available\n */export function resolveEmojiUrl(emoji){if(!(emoji!==null&&emoji!==void 0&&emoji.id))return null;// For Unicode emojis (no ID)\nconst ext=emoji.animated?\"gif\":\"png\";return\"https://cdn.discordapp.com/emojis/\".concat(emoji.id,\".\").concat(ext,\"?v=1\");}/**\n * Formats time display from timestamps\n * @param start Start timestamp in ms\n * @param end End timestamp in ms (optional)\n * @returns Formatted time string (e.g. \"5:23\" or \"1:05:23\")\n */export function formatTimeDisplay(start,end){if(!start)return\"\";const now=Date.now();const endTime=end||now;const durationMs=endTime-start;const seconds=Math.floor(durationMs/1000%60);const minutes=Math.floor(durationMs/(1000*60)%60);const hours=Math.floor(durationMs/(1000*60*60));if(hours>0){return\"\".concat(hours,\":\").concat(minutes.toString().padStart(2,\"0\"),\":\").concat(seconds.toString().padStart(2,\"0\"));}else{return\"\".concat(minutes,\":\").concat(seconds.toString().padStart(2,\"0\"));}}/**\n * Formats music player time display with progress calculation\n * @param start Start timestamp in ms\n * @param end End timestamp in ms\n * @returns Object with current time, total time, and progress percentage\n */export function formatMusicTime(start,end){if(!start||!end)return{current:\"0:00\",total:\"0:00\",progress:0};const now=Date.now();const totalDuration=end-start;const currentPosition=now-start;const progress=Math.min(Math.max(currentPosition/totalDuration*100,0),100);return{current:formatTimeDisplay(start,now),total:formatTimeDisplay(start,end),progress};}","map":{"version":3,"names":["resolveActivityImage","appId","key","startsWith","slice","concat","resolveEmojiUrl","emoji","id","ext","animated","formatTimeDisplay","start","end","now","Date","endTime","durationMs","seconds","Math","floor","minutes","hours","toString","padStart","formatMusicTime","current","total","progress","totalDuration","currentPosition","min","max"],"sources":["/home/aike/Development/aboutMe/src/utils/discordUtils.ts"],"sourcesContent":["/**\n * Discord activity image URLs\n * @param appId Application ID for the activity\n * @param key Image key from Discord\n * @returns Full image URL or null if not available\n */\nexport function resolveActivityImage(appId: string, key?: string | null) {\n  if (!key) return null;\n  if (key.startsWith(\"http\")) return key;\n  if (key.startsWith(\"mp:\"))\n    return \"https://media.discordapp.net/\" + key.slice(3);\n  return `https://cdn.discordapp.com/app-assets/${appId}/${key}.png`;\n}\n\n/**\n *  Discord emoji URL\n * @param emoji Emoji object from Discord\n * @returns Full emoji URL or null if not available\n */\nexport function resolveEmojiUrl(emoji: { id?: string; animated?: boolean }) {\n  if (!emoji?.id) return null; // For Unicode emojis (no ID)\n  const ext = emoji.animated ? \"gif\" : \"png\";\n  return `https://cdn.discordapp.com/emojis/${emoji.id}.${ext}?v=1`;\n}\n\n/**\n * Formats time display from timestamps\n * @param start Start timestamp in ms\n * @param end End timestamp in ms (optional)\n * @returns Formatted time string (e.g. \"5:23\" or \"1:05:23\")\n */\nexport function formatTimeDisplay(start?: number, end?: number): string {\n  if (!start) return \"\";\n\n  const now = Date.now();\n  const endTime = end || now;\n  const durationMs = endTime - start;\n  const seconds = Math.floor((durationMs / 1000) % 60);\n  const minutes = Math.floor((durationMs / (1000 * 60)) % 60);\n  const hours = Math.floor(durationMs / (1000 * 60 * 60));\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds\n      .toString()\n      .padStart(2, \"0\")}`;\n  } else {\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  }\n}\n\n/**\n * Formats music player time display with progress calculation\n * @param start Start timestamp in ms\n * @param end End timestamp in ms\n * @returns Object with current time, total time, and progress percentage\n */\nexport function formatMusicTime(\n  start?: number,\n  end?: number\n): { current: string; total: string; progress: number } {\n  if (!start || !end) return { current: \"0:00\", total: \"0:00\", progress: 0 };\n\n  const now = Date.now();\n  const totalDuration = end - start;\n  const currentPosition = now - start;\n\n  const progress = Math.min(\n    Math.max((currentPosition / totalDuration) * 100, 0),\n    100\n  );\n\n  return {\n    current: formatTimeDisplay(start, now),\n    total: formatTimeDisplay(start, end),\n    progress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}