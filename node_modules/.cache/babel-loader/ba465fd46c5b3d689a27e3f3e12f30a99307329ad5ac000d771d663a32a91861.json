{"ast":null,"code":"import axios from 'axios';\n\n/**\n * API Configuration\n */\nconst API_CONFIG = {\n  v1: {\n    baseUrl: 'https://api.counterapi.dev/v1',\n    endpoints: {\n      up: '/{namespace}/{name}/up',\n      down: '/{namespace}/{name}/down',\n      get: '/{namespace}/{name}',\n      set: '/{namespace}/{name}/?count={value}'\n    }\n  },\n  v2: {\n    baseUrl: 'https://api.counterapi.dev/v2',\n    endpoints: {\n      up: '/{workspace}/{name}/up',\n      down: '/{workspace}/{name}/down',\n      get: '/{workspace}/{name}',\n      reset: '/{workspace}/{name}/reset',\n      stats: '/{workspace}/{name}/stats'\n    }\n  }\n};\n/**\n * Axios-based HTTP client implementation\n */\nclass AxiosHttpClient {\n  constructor(config) {\n    this.version = config.version;\n    this.accessToken = config.accessToken;\n    this.client = axios.create({\n      baseURL: API_CONFIG[this.version].baseUrl,\n      timeout: config.timeout || 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config.accessToken && {\n          'Authorization': `Bearer ${config.accessToken}`\n        })\n      }\n    });\n    // Request interceptor for debugging\n    if (config.debug) {\n      this.client.interceptors.request.use(request => {\n        console.log('[CounterAPI] Request:', {\n          method: request.method?.toUpperCase(),\n          url: request.url,\n          headers: request.headers,\n          data: request.data\n        });\n        return request;\n      });\n    }\n    // Response interceptor for debugging and error handling\n    this.client.interceptors.response.use(response => {\n      if (config.debug) {\n        console.log('[CounterAPI] Response:', {\n          status: response.status,\n          data: response.data\n        });\n      }\n      return response;\n    }, error => {\n      if (config.debug) {\n        console.log('[CounterAPI] Error:', {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.message\n        });\n      }\n      // Transform axios error to our custom error format\n      const apiError = {\n        message: error.response?.data?.message || error.message || 'Request failed',\n        status: error.response?.status,\n        code: error.response?.data?.code || error.code,\n        details: error.response?.data\n      };\n      throw apiError;\n    });\n  }\n  /**\n   * Creates a URL by replacing placeholders in the endpoint pattern\n   */\n  createUrl(endpoint, params) {\n    let url = endpoint;\n    // Replace named parameters in URL pattern\n    for (const [key, value] of Object.entries(params)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    return url;\n  }\n  async get(url, config) {\n    const response = await this.client.get(url, config);\n    return response.data;\n  }\n  async post(url, data, config) {\n    const response = await this.client.post(url, data, config);\n    return response.data;\n  }\n}\n\n/**\n * Main Counter client class\n */\nclass Counter {\n  constructor(config) {\n    this.version = config.version || 'v2'; // Default to v2 if not specified\n    // Handle namespace/workspace parameter based on version\n    if (this.version === 'v2') {\n      // For v2, prefer workspace parameter if provided, otherwise fall back to namespace\n      this.namespace = config.workspace || config.namespace || '';\n    } else {\n      // For v1, use namespace parameter\n      this.namespace = config.namespace || '';\n    }\n    // Validate required config\n    if (!this.namespace) {\n      if (this.version === 'v2') {\n        throw new Error('Workspace is required for v2 API');\n      } else {\n        throw new Error('Namespace is required for v1 API');\n      }\n    }\n    // Initialize HTTP client\n    this.http = new AxiosHttpClient({\n      version: this.version,\n      timeout: config.timeout,\n      debug: config.debug,\n      accessToken: config.accessToken\n    });\n  }\n  /**\n   * Get the current counter value\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async get(name) {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('get', {\n      name\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Increment the counter value by 1\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async up(name) {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('up', {\n      name\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Decrement the counter value by 1\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async down(name) {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('down', {\n      name\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Set the counter value (v1 only)\n   * @param name - The counter name\n   * @param value - The value to set\n   * @returns Promise resolving to counter response\n   */\n  async set(name, value) {\n    if (this.version !== 'v1') {\n      throw new Error('set method is only available in v1');\n    }\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('set', {\n      name,\n      value\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Reset the counter value to 0 (v2 only)\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async reset(name) {\n    if (this.version !== 'v2') {\n      throw new Error('reset method is only available in v2');\n    }\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('reset', {\n      name\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Get counter statistics (v2 only)\n   * @param name - The counter name\n   * @returns Promise resolving to counter stats response\n   */\n  async stats(name) {\n    if (this.version !== 'v2') {\n      throw new Error('stats method is only available in v2');\n    }\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n    const endpoint = this.createEndpointUrl('stats', {\n      name\n    });\n    return await this.http.get(endpoint);\n  }\n  /**\n   * Creates a URL by replacing placeholders in the endpoint pattern\n   */\n  createEndpointUrl(method, params) {\n    // Get the endpoint pattern based on version and method\n    const endpoints = API_CONFIG[this.version].endpoints;\n    let endpointPattern;\n    if (this.version === 'v1') {\n      const v1Endpoints = endpoints;\n      endpointPattern = v1Endpoints[method];\n    } else {\n      const v2Endpoints = endpoints;\n      endpointPattern = v2Endpoints[method];\n    }\n    if (!endpointPattern) {\n      throw new Error(`Invalid method: ${method}`);\n    }\n    // Replace namespace/workspace placeholder based on version\n    const namespaceKey = this.version === 'v1' ? 'namespace' : 'workspace';\n    // Prepare params for URL creation\n    const urlParams = {\n      [namespaceKey]: this.namespace,\n      ...params\n    };\n    // In axios HTTP client, create the URL by replacing placeholders\n    return this.http.createUrl(endpointPattern, urlParams);\n  }\n}\n// Backward compatibility alias\nconst CounterClient = Counter;\nexport { Counter, CounterClient };","map":{"version":3,"names":["API_CONFIG","v1","baseUrl","endpoints","up","down","get","set","v2","reset","stats","AxiosHttpClient","constructor","config","version","accessToken","client","axios","create","baseURL","timeout","headers","debug","interceptors","request","use","console","log","method","toUpperCase","url","data","response","status","error","message","apiError","code","details","createUrl","endpoint","params","key","value","Object","entries","replace","String","post","Counter","namespace","workspace","Error","http","name","createEndpointUrl","endpointPattern","v1Endpoints","v2Endpoints","namespaceKey","urlParams","CounterClient"],"sources":["/home/aike/Development/aboutMe/node_modules/src/http/index.ts","/home/aike/Development/aboutMe/node_modules/src/client/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { HttpClient, ApiError, ApiConfig } from '../types/index.js';\n\n/**\n * API Configuration\n */\nexport const API_CONFIG: ApiConfig = {\n  v1: {\n    baseUrl: 'https://api.counterapi.dev/v1',\n    endpoints: {\n      up: '/{namespace}/{name}/up',\n      down: '/{namespace}/{name}/down',\n      get: '/{namespace}/{name}',\n      set: '/{namespace}/{name}/?count={value}',\n    },\n  },\n  v2: {\n    baseUrl: 'https://api.counterapi.dev/v2',\n    endpoints: {\n      up: '/{workspace}/{name}/up',\n      down: '/{workspace}/{name}/down',\n      get: '/{workspace}/{name}',\n      reset: '/{workspace}/{name}/reset',\n      stats: '/{workspace}/{name}/stats',\n    },\n  },\n};\n\n/**\n * Axios-based HTTP client implementation\n */\nexport class AxiosHttpClient implements HttpClient {\n  private client: AxiosInstance;\n  private version: 'v1' | 'v2';\n  private accessToken?: string;\n\n  constructor(config: {\n    version: 'v1' | 'v2';\n    timeout?: number;\n    debug?: boolean;\n    accessToken?: string;\n  }) {\n    this.version = config.version;\n    this.accessToken = config.accessToken;\n\n    this.client = axios.create({\n      baseURL: API_CONFIG[this.version].baseUrl,\n      timeout: config.timeout || 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config.accessToken && { 'Authorization': `Bearer ${config.accessToken}` })\n      }\n    });\n\n    // Request interceptor for debugging\n    if (config.debug) {\n      this.client.interceptors.request.use((request) => {\n        console.log('[CounterAPI] Request:', {\n          method: request.method?.toUpperCase(),\n          url: request.url,\n          headers: request.headers,\n          data: request.data\n        });\n        return request;\n      });\n    }\n\n    // Response interceptor for debugging and error handling\n    this.client.interceptors.response.use(\n      (response: AxiosResponse) => {\n        if (config.debug) {\n          console.log('[CounterAPI] Response:', {\n            status: response.status,\n            data: response.data\n          });\n        }\n        return response;\n      },\n      (error) => {\n        if (config.debug) {\n          console.log('[CounterAPI] Error:', {\n            status: error.response?.status,\n            data: error.response?.data,\n            message: error.message\n          });\n        }\n\n        // Transform axios error to our custom error format\n        const apiError: ApiError = {\n          message: error.response?.data?.message || error.message || 'Request failed',\n          status: error.response?.status,\n          code: error.response?.data?.code || error.code,\n          details: error.response?.data\n        };\n\n        throw apiError;\n      }\n    );\n  }\n\n  /**\n   * Creates a URL by replacing placeholders in the endpoint pattern\n   */\n  createUrl(endpoint: string, params: Record<string, string | number>): string {\n    let url = endpoint;\n    \n    // Replace named parameters in URL pattern\n    for (const [key, value] of Object.entries(params)) {\n      url = url.replace(`{${key}}`, String(value));\n    }\n    \n    return url;\n  }\n\n  async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.client.get<T>(url, config);\n    return response.data;\n  }\n\n  async post<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {\n    const response = await this.client.post<T>(url, data, config);\n    return response.data;\n  }\n} ","import { \n  CounterConfig, \n  CounterResponse,\n  CounterStatsResponse,\n  HttpClient \n} from '../types/index.js';\nimport { AxiosHttpClient, API_CONFIG } from '../http/index.js';\n\n/**\n * Main Counter client class\n */\nexport class Counter {\n  private http: HttpClient;\n  private namespace: string;\n  private version: 'v1' | 'v2';\n\n  constructor(config: CounterConfig) {\n    this.version = config.version || 'v2'; // Default to v2 if not specified\n    \n    // Handle namespace/workspace parameter based on version\n    if (this.version === 'v2') {\n      // For v2, prefer workspace parameter if provided, otherwise fall back to namespace\n      this.namespace = config.workspace || config.namespace || '';\n    } else {\n      // For v1, use namespace parameter\n      this.namespace = config.namespace || '';\n    }\n    \n    // Validate required config\n    if (!this.namespace) {\n      if (this.version === 'v2') {\n        throw new Error('Workspace is required for v2 API');\n      } else {\n        throw new Error('Namespace is required for v1 API');\n      }\n    }\n\n    // Initialize HTTP client\n    this.http = new AxiosHttpClient({\n      version: this.version,\n      timeout: config.timeout,\n      debug: config.debug,\n      accessToken: config.accessToken\n    });\n  }\n\n  /**\n   * Get the current counter value\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async get(name: string): Promise<CounterResponse> {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('get', { name });\n    return await this.http.get<CounterResponse>(endpoint);\n  }\n\n  /**\n   * Increment the counter value by 1\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async up(name: string): Promise<CounterResponse> {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('up', { name });\n    return await this.http.get<CounterResponse>(endpoint);\n  }\n\n  /**\n   * Decrement the counter value by 1\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async down(name: string): Promise<CounterResponse> {\n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('down', { name });\n    return await this.http.get<CounterResponse>(endpoint);\n  }\n\n  /**\n   * Set the counter value (v1 only)\n   * @param name - The counter name\n   * @param value - The value to set\n   * @returns Promise resolving to counter response\n   */\n  async set(name: string, value: number): Promise<CounterResponse> {\n    if (this.version !== 'v1') {\n      throw new Error('set method is only available in v1');\n    }\n    \n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('set', { name, value });\n    return await this.http.get<CounterResponse>(endpoint);\n  }\n\n  /**\n   * Reset the counter value to 0 (v2 only)\n   * @param name - The counter name\n   * @returns Promise resolving to counter response\n   */\n  async reset(name: string): Promise<CounterResponse> {\n    if (this.version !== 'v2') {\n      throw new Error('reset method is only available in v2');\n    }\n    \n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('reset', { name });\n    return await this.http.get<CounterResponse>(endpoint);\n  }\n\n  /**\n   * Get counter statistics (v2 only)\n   * @param name - The counter name\n   * @returns Promise resolving to counter stats response\n   */\n  async stats(name: string): Promise<CounterStatsResponse> {\n    if (this.version !== 'v2') {\n      throw new Error('stats method is only available in v2');\n    }\n    \n    if (!name) {\n      throw new Error('Counter name is required');\n    }\n\n    const endpoint = this.createEndpointUrl('stats', { name });\n    return await this.http.get<CounterStatsResponse>(endpoint);\n  }\n\n  /**\n   * Creates a URL by replacing placeholders in the endpoint pattern\n   */\n  private createEndpointUrl(method: string, params: { name: string, value?: number }): string {\n    // Get the endpoint pattern based on version and method\n    const endpoints = API_CONFIG[this.version].endpoints;\n    let endpointPattern: string | undefined;\n    \n    if (this.version === 'v1') {\n      const v1Endpoints = endpoints as typeof API_CONFIG['v1']['endpoints'];\n      endpointPattern = v1Endpoints[method as keyof typeof v1Endpoints];\n    } else {\n      const v2Endpoints = endpoints as typeof API_CONFIG['v2']['endpoints'];\n      endpointPattern = v2Endpoints[method as keyof typeof v2Endpoints];\n    }\n    \n    if (!endpointPattern) {\n      throw new Error(`Invalid method: ${method}`);\n    }\n\n    // Replace namespace/workspace placeholder based on version\n    const namespaceKey = this.version === 'v1' ? 'namespace' : 'workspace';\n    \n    // Prepare params for URL creation\n    const urlParams = {\n      [namespaceKey]: this.namespace,\n      ...params\n    };\n\n    // In axios HTTP client, create the URL by replacing placeholders\n    return (this.http as AxiosHttpClient).createUrl(endpointPattern, urlParams);\n  }\n}\n\n// Backward compatibility alias\nexport const CounterClient = Counter; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}